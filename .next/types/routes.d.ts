// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/audit.logs" | "/audit.logs/[id]" | "/employees" | "/employees/[id]" | "/employees/[id]/delegate" | "/employees/[id]/edit" | "/employees/[id]/suspend" | "/employees/add" | "/login" | "/settings" | "/settings/permissions" | "/settings/profile" | "/shared-drive" | "/shared-drive/[folderId]" | "/shared-drive/create-folder" | "/shared-drive/upload"
type AppRouteHandlerRoutes = "/api/audit-logs" | "/api/audit-logs/[id]" | "/api/auth/[...nextauth]" | "/api/auth/session" | "/api/calender/share" | "/api/drive/files" | "/api/drive/files/[fileId]" | "/api/drive/folders" | "/api/drive/permissions" | "/api/drive/permissions/[permissionId]" | "/api/drive/share" | "/api/drive/upload" | "/api/employees" | "/api/employees/[id]" | "/api/employees/[id]/alias" | "/api/employees/[id]/restore" | "/api/employees/[id]/suspend" | "/api/gmail/forward"
type PageRoutes = never
type LayoutRoutes = "/"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/audit-logs": {}
  "/api/audit-logs/[id]": { "id": string; }
  "/api/auth/[...nextauth]": { "nextauth": string[]; }
  "/api/auth/session": {}
  "/api/calender/share": {}
  "/api/drive/files": {}
  "/api/drive/files/[fileId]": { "fileId": string; }
  "/api/drive/folders": {}
  "/api/drive/permissions": {}
  "/api/drive/permissions/[permissionId]": { "permissionId": string; }
  "/api/drive/share": {}
  "/api/drive/upload": {}
  "/api/employees": {}
  "/api/employees/[id]": { "id": string; }
  "/api/employees/[id]/alias": { "id": string; }
  "/api/employees/[id]/restore": { "id": string; }
  "/api/employees/[id]/suspend": { "id": string; }
  "/api/gmail/forward": {}
  "/audit.logs": {}
  "/audit.logs/[id]": { "id": string; }
  "/employees": {}
  "/employees/[id]": { "id": string; }
  "/employees/[id]/delegate": { "id": string; }
  "/employees/[id]/edit": { "id": string; }
  "/employees/[id]/suspend": { "id": string; }
  "/employees/add": {}
  "/login": {}
  "/settings": {}
  "/settings/permissions": {}
  "/settings/profile": {}
  "/shared-drive": {}
  "/shared-drive/[folderId]": { "folderId": string; }
  "/shared-drive/create-folder": {}
  "/shared-drive/upload": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
