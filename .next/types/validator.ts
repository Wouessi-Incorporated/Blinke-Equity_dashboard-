// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/(auth)/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../src/app/(auth)/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/audit.logs/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/audit.logs/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/audit.logs/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/audit.logs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/audit.logs">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/audit.logs/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/employees/[id]/delegate/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/employees/[id]/delegate">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/employees/[id]/delegate/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/employees/[id]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/employees/[id]/edit">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/employees/[id]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/employees/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/employees/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/employees/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/employees/[id]/suspend/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/employees/[id]/suspend">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/employees/[id]/suspend/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/employees/add/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/employees/add">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/employees/add/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/employees/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/employees">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/employees/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/permissions/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/permissions">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/permissions/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/settings/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings/profile">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/shared-drive/[folderId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/shared-drive/[folderId]">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/shared-drive/[folderId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/shared-drive/create-folder/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/shared-drive/create-folder">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/shared-drive/create-folder/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/shared-drive/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/shared-drive">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/shared-drive/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/shared-drive/upload/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/shared-drive/upload">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/shared-drive/upload/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/audit-logs/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/audit-logs/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/audit-logs/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/audit-logs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/audit-logs">> = Specific
  const handler = {} as typeof import("../../src/app/api/audit-logs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/session/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/session">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/session/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/calender/share/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/calender/share">> = Specific
  const handler = {} as typeof import("../../src/app/api/calender/share/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/files/[fileId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/files/[fileId]">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/files/[fileId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/files/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/files">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/files/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/folders/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/folders">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/folders/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/permissions/[permissionId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/permissions/[permissionId]">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/permissions/[permissionId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/permissions/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/permissions">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/permissions/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/share/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/share">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/share/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/drive/upload/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/drive/upload">> = Specific
  const handler = {} as typeof import("../../src/app/api/drive/upload/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/employees/[id]/alias/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/employees/[id]/alias">> = Specific
  const handler = {} as typeof import("../../src/app/api/employees/[id]/alias/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/employees/[id]/restore/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/employees/[id]/restore">> = Specific
  const handler = {} as typeof import("../../src/app/api/employees/[id]/restore/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/employees/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/employees/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/employees/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/employees/[id]/suspend/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/employees/[id]/suspend">> = Specific
  const handler = {} as typeof import("../../src/app/api/employees/[id]/suspend/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/employees/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/employees">> = Specific
  const handler = {} as typeof import("../../src/app/api/employees/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/gmail/forward/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/gmail/forward">> = Specific
  const handler = {} as typeof import("../../src/app/api/gmail/forward/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/(auth)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(auth)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(dashboard)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(dashboard)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
